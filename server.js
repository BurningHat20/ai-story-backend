require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const rateLimit = require('express-rate-limit');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

const API_KEY = process.env.RAPID_API_KEY;

// Create a rate limiter: maximum of 6 requests per minute
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 6, // Limit each IP to 6 requests per windowMs
  message: "Too many requests, please try again later.",
});

// Apply rate limiter to all requests
app.use(limiter);

app.post('/generate-image', async (req, res) => {
  try {
    const { prompt } = req.body;
    const response = await axios.post('https://ai-text-to-image-generator-api.p.rapidapi.com/3D', {
      inputs: prompt
    }, {
      headers: {
        'x-rapidapi-key': API_KEY,
        'x-rapidapi-host': 'ai-text-to-image-generator-api.p.rapidapi.com',
        'Content-Type': 'application/json'
      }
    });

    res.json({ imageUrl: response.data.url });
  } catch (error) {
    console.error('Error generating image:', error.response ? error.response.data : error.message);
    res.status(500).json({ error: 'Failed to generate image', details: error.response ? error.response.data : error.message });
  }
});

app.post('/generate-pdf', async (req, res) => {
  try {
    const { title, paragraphs, images } = req.body;

    const doc = new PDFDocument({
      size: 'A4',
      margins: { top: 72, left: 72, right: 72, bottom: 72 }
    });
    
    const buffers = [];
    doc.on('data', buffers.push.bind(buffers));
    doc.on('end', () => {
      const pdfData = Buffer.concat(buffers);
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename=story_book.pdf');
      res.send(pdfData);
    });

    // Cover page
    try {
      const coverImageResponse = await axios.get(images[0], { responseType: 'arraybuffer' });
      doc.image(coverImageResponse.data, 0, 0, { width: 595.28, height: 841.89, align: 'center', valign: 'center' });
    } catch (imageError) {
      console.error('Error loading cover image:', imageError);
      doc.rect(0, 0, 595.28, 841.89).fill('#fef3c7'); // Light amber background
      doc.fontSize(24).text('Cover image not available', 100, 400, { align: 'center' });
    }

    doc.fontSize(36).font('Helvetica-Bold').text(title, { align: 'center', valign: 'center' });
    doc.moveDown(2);
    doc.fontSize(18).font('Helvetica').text('A Tale Generated by AI', { align: 'center' });

    // Content pages
    for (let i = 0; i < paragraphs.length; i++) {
      doc.addPage();

      // Page number
      doc.fontSize(10).text(`${i + 1}`, 550, 800, { align: 'right' });

      // Paragraph
      doc.fontSize(12).font('Helvetica').text(paragraphs[i], {
        align: 'justify',
        columns: 1,
        columnGap: 15,
        height: 250,
        width: 450
      });

      // Image
      if (images[i + 1]) {
        try {
          const imageResponse = await axios.get(images[i + 1], { responseType: 'arraybuffer' });
          doc.image(imageResponse.data, 72, 350, {
            fit: [450, 400],
            align: 'center',
            valign: 'center'
          });
        } catch (imageError) {
          console.error(`Error loading image for paragraph ${i + 1}:`, imageError);
          doc.fontSize(14).text('Image not available', 72, 350, { align: 'center' });
        }
      }
    }

    doc.end();
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ error: 'Failed to generate PDF', details: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});